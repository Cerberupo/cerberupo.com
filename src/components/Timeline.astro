---
import {TimelineCompany} from "../interfaces/timeline-company";
interface Props {
    companies: TimelineCompany[];
}
const {companies} = Astro.props;
import {useTranslations} from "../i18n/utils";
import TimelineCard from "./TimelineCard.astro";
import Container from "../layouts/Container.astro";
import Spacer from "../layouts/Spacer.astro";
import {StyleSPEnum} from "../styles/enums/sp.enum";
import Box from "../layouts/Box.astro";
import {Image} from 'astro:assets';
import Flex from "../layouts/Flex.astro";
import {StyleAlignItemsEnum} from "../styles/enums/align-items.enum";
import Text from "../layouts/Text.astro";
import {StyleFSEnum} from "../styles/enums/fs.enum";
import {StyleFWEnum} from "../styles/enums/fw.enum";
import {getDate} from "../helpers/getDate";
import {StyleJustifyContentEnum} from "../styles/enums/justify-content.enum";
const {t} = useTranslations(Astro.url);
---

<section>
    <Spacer size={{default: StyleSPEnum.SP64, mobileS: StyleSPEnum.SP32}}/>
    <Container class="container">
        {companies.map((company) =>
                <Box class="container-container">
                    <Box p={StyleSPEnum.SP8} class="company-info">
                        <Text fontSize={StyleFSEnum.FS14} fontWeight={StyleFWEnum.LIGHT}>
                            {getDate(t, company.projects[0].endDate)}
                        </Text>
                        <Spacer size={StyleSPEnum.SP8}/>
                        <Box class="company-name">
                            <Text fontSize={StyleFSEnum.FS16} fontWeight={StyleFWEnum.REGULAR}>
                                {company.name}
                            </Text>
                            <Spacer size={StyleSPEnum.SP4}/>
                        </Box>
                        <Image class="company-image" src={company.logo}
                               alt={`${company.name} logo`} loading="eager"/>
                        <Spacer size={StyleSPEnum.SP4}/>
                    </Box>
                    {company.projects.map((project) => {
                            const side = project.side || company.side;
                            return (
                                    <Flex class={`company-proyect ${side}`}
                                          data-date-start={project.startDate.toString()}
                                          data-date-end={project.endDate.toString()}>
                                        {side === 'right' &&
                                                <>
                                                    <Box class="timeline-image-container">
                                                        {project.noImage ?
                                                                <Box class="no-image">
                                                                    <Text fontSize={StyleFSEnum.FS16}
                                                                          fontWeight={StyleFWEnum.REGULAR}>
                                                                        {t('timeline.noImage')}
                                                                    </Text>
                                                                </Box> : ''}
                                                        <Image class="timeline-image" src={project.proyectImage}
                                                               alt={`${project.proyectName} project`} loading="eager"/>
                                                    </Box>
                                                    <Flex justifyContent={StyleJustifyContentEnum.CENTER}
                                                          class="project-line-container">
                                                        <Box style={{background: project.color}} class="project-line"/>
                                                    </Flex>
                                                    <Box class="timeline-card">
                                                        <TimelineCard {...project.proyectCardProps}
                                                                      company={company}
                                                                      endDate={project.endDate}
                                                                      startDate={project.startDate}/>
                                                    </Box>
                                                </>}


                                        {side === 'left' &&
                                                <>
                                                    <Box class="timeline-card">
                                                        <TimelineCard {...project.proyectCardProps}
                                                                      company={company}
                                                                      endDate={project.endDate}
                                                                      startDate={project.startDate}/>
                                                    </Box>
                                                    <Flex justifyContent={StyleJustifyContentEnum.CENTER}
                                                          class="project-line-container">
                                                        <Box style={{background: project.color}} class="project-line"/>
                                                    </Flex>
                                                    <Box class="timeline-image-container">
                                                        <Image class="timeline-image" src={project.proyectImage}
                                                               alt={`${project.proyectName} project`} loading="eager"/>
                                                    </Box>
                                                </>}

                                    </Flex>)
                        }
                    )}
                </Box>
        )}
    </Container>
</section>

<script>
    import {useTranslations} from "../i18n/utils";

    const {t} = useTranslations(window.location);
    const containers: HTMLElement[] = document.querySelectorAll('.container-container') as unknown as HTMLElement[];
    const companyInfos: HTMLElement[] = document.querySelectorAll('.company-info') as unknown as HTMLElement[];

    document.addEventListener("scroll", () => {
        process();
    });
    process();

    function getDatePerBetween(start: Date, end: Date, per: number) {
        if (per > 1) return start;
        if (per < 0) return end;
        const diff = (end.getTime() - start.getTime()) * per;
        return new Date(end.getTime() - diff);
    }


    function process() {
        const windowMiddle = window.innerHeight / 2;
        containers.forEach((container, index) => {
            const nextContainer = containers[index + 1];
            const companyInfo: HTMLElement = companyInfos[index];
            const companyHeight = companyInfo.getBoundingClientRect().height;
            const rect = container.getBoundingClientRect();
            let diff = rect.top - windowMiddle - companyHeight / 2;
            let limit = rect.top + rect.height;
            let diff2 = limit - windowMiddle + companyHeight / 2;
            let top;
            if (diff < 0 && diff2 >= 0) {
                top = Math.abs(diff) + 'px';
                const opa = Math.abs((((diff) / (companyHeight)) * 100));
                companyInfo.style.opacity = (opa < 20 ? 20 : opa) + '%'
            } else if (diff > 0) {
                top = '0px';
                companyInfo.style.opacity = '20%';
            } else if (diff2 <= 0) {
                top = rect.height + companyHeight + 'px';
                companyInfo.style.opacity = '35%';
            }
            companyInfo.style.top = top;
            if (diff < 0 && diff2 >= 0) {
                if (limit - windowMiddle < 0) {
                    const curr = Math.abs(limit - windowMiddle);
                    const per = Math.abs((((curr) / (companyHeight)) * 100) - 100);
                    companyInfo.style.opacity = (per < 35 ? 35 : per) + '%';
                }
            }


            const projects = container.querySelectorAll('.company-proyect');
            const infoRect = companyInfo.getBoundingClientRect();
            projects.forEach((proyect) => {
                const projectRect = proyect.getBoundingClientRect();
                const projectStart = new Date(proyect.getAttribute('data-date-start'));
                const projectEnd = new Date(proyect.getAttribute('data-date-end'));

                const init = projectRect.top;
                const finish = projectRect.top + projectRect.height;
                const top = infoRect.top + infoRect.height / 2;
                if (top > init) {
                    const per = ((top - init) / (finish - init))
                    const perDate = getDatePerBetween(projectStart, projectEnd, per);
                    const date = companyInfo.querySelector('span');
                    date.innerHTML = t(`timeline.months.${perDate.getMonth()}`) + ' ' + perDate.getFullYear();
                }
            })

            if (nextContainer) {
                nextContainer.style.marginTop = companyHeight + 'px';
            }

        })
    }
</script>

<style lang="scss">
  @import "../styles/vars";

  $centerWidth: 230px;
  $centerWidth1: 175px;
  $centerWidth2: 65px;

  .company-image {
    max-width: 44px;
    max-height: 44px;
    border: 1px solid $logoBorder;
    border-radius: 8px;
    overflow: hidden;
  }

  .container-container {
    margin-top: $sp128;
    position: relative;
  }

  .company-info {
    position: absolute;
    width: $centerWidth;
    left: calc(50% - $centerWidth / 2);
    top: 0;
    text-align: center;
    background-color: $white;
    transform: translateY(-100%);
    z-index: 9;
  }

  .timeline-image-container {
    align-self: center;
    position: relative;
    flex: 1;
    overflow: hidden;
    border-radius: 8px;

    .no-image {
      height: 100%;
      width: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      position: absolute;
      background-color: rgba(0, 0, 0, 0.6);
      color: $white;
    }

    .timeline-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  }

  .timeline-card {
    flex: 1;
  }

  .company-proyect {
    position: relative;
    padding-top: $sp16;
    padding-bottom: $sp16;

    .project-line-container {
      width: $centerWidth;
      align-self: stretch;

      .project-line {
        width: 4px;
        height: 100%;
        border-radius: 5px;
      }
    }
  }

  @media all and (max-width: $mediaTabletHorizontal) {
    .company-proyect {
      flex-direction: column-reverse !important;
      padding-left: $centerWidth;

      &.right {
        flex-direction: column !important;
      }

      .timeline-image-container {
        margin-bottom: $sp32;
      }

      .project-line-container {
        position: absolute;
        left: 0;
        top: 0;
        height: 100%;
        z-index: 1;
      }
    }
    .company-info {
      left: 0;
    }
  }

  @media all and (max-width: $mobile) {
    .company-proyect {
      padding-left: $centerWidth1;

      .timeline-image-container {
        margin-bottom: $sp16;
      }

      .project-line-container {
        width: $centerWidth1;
      }

    }
    .company-info {
      left: 0;
      width: $centerWidth1;
    }

  }

  @media all and (max-width: $mobileSmall) {
    .company-name {
      display: none;
    }
    .company-proyect {
      padding-left: $centerWidth2;


      .project-line-container {
        width: $centerWidth2;
      }

    }
    .company-info {
      width: $centerWidth2;

      span, .spacer {
        display: none;
      }
    }
    .container-container {
      left: -$sp16;
      width: calc(100% + $sp16);
      margin-top: $sp64;
    }
  }
</style>