---
import type {TimelineCard} from "../interfaces/timeline-card";
import {Image} from 'astro:assets';
import {useTranslations} from "../i18n/utils";
import Text from "../layouts/Text.astro";
import {StyleFSEnum} from "../styles/enums/fs.enum";
import Flex from "../layouts/Flex.astro";
import {StyleSPEnum} from "../styles/enums/sp.enum";
import {StyleAlignItemsEnum} from "../styles/enums/align-items.enum";
import Spacer from "../layouts/Spacer.astro";
import Tag from "./Tag.astro";
import Box from "../layouts/Box.astro";
import Button from "../layouts/Button.astro";
import {ButtonTypeEnum} from "../styles/enums/button-type.enum";
import {StyleFlexWrapEnum} from "../styles/enums/flex-wrap.enum";
import Star from "../icons/star.svg";
import TimelineModal from "./TimelineModal.astro";
import _ from "lodash";
interface Props extends TimelineCard {
}

const {star, name, position, logo, description, tags, endDate, startDate, current, company} = Astro.props;

function monthDiff() {
    const months = endDate.getMonth() - startDate.getMonth() +
        (12 * (endDate.getFullYear() - startDate.getFullYear()));

    if (months > 12) {
        const years = Math.floor(months / 12);
        const y_months = months - (years * 12);
        const ys = years === 1 ? 'year' : 'years';
        const ms = y_months === 1 ? 'month' : 'months';
        return t(`timeline.card.${ys}_${ms}`).replace('{{years}}', years).replace('{{months}}', y_months)
    }
    if (months == 12) {
        return t('timeline.card.year')
    }
    return months > 1 ? t('timeline.card.months').replace('{{months}}', months) : t('timeline.card.month').replace('{{months}}', months);
}

const {t} = useTranslations(Astro.url);
const modalId = 'modal_' + _.uniqueId();
---
<article>
    <Flex gap={StyleSPEnum.SP8} alignItems={StyleAlignItemsEnum.CENTER}>
        <Image class="logo" src={logo} alt={`${name} logo`} loading="eagle"/>
        <Text class="name" fontSize={StyleFSEnum.FS12}>
            {name}
        </Text>
        <Text fontSize={StyleFSEnum.FS12}>
            |
        </Text>
        <Text class="months" fontSize={StyleFSEnum.FS12}>
            {monthDiff()}&nbsp;{current ? t('timeline.card.current') : ''}
        </Text>
        {star ?
                <Image class="star" src={Star} alt="Star"/> : ''}

    </Flex>
    <Spacer size={StyleSPEnum.SP8}/>
    <Box>
        <Text fontSize={{default: StyleFSEnum.FS24, mobile: StyleFSEnum.FS16}}>{position}</Text>
    </Box>
    <Spacer size={StyleSPEnum.SP16}/>
    <Box>
        <Text fontSize={StyleFSEnum.FS14}>
            <Fragment set:html={description}/>
        </Text>
    </Box>
    <Spacer size={StyleSPEnum.SP8}/>
    <Flex wrap={StyleFlexWrapEnum.WRAP} gap={StyleSPEnum.SP4}>
        {tags.map((tag) =>
                <Tag name={tag}/>)}
    </Flex>
    <Spacer size={StyleSPEnum.SP16}/>
    <Box class="line"/>
    <Spacer size={StyleSPEnum.SP16}/>
    <Button data-modal-id={modalId} class="timeline-card-button" type={ButtonTypeEnum.OUTLINE}>
        {t('timeline.card.button')}
    </Button>
    <TimelineModal id={modalId} company={company} {...Astro.props}/>
</article>

<script>
    import initSwiper from "../js/initSwiper";

    const buttons = document.querySelectorAll('.timeline-card-button');
    buttons.forEach((button) => {
        button.addEventListener('click', () => {
            const modal = document.getElementById(button.getAttribute('data-modal-id'));
            const isOpen = modal.classList.contains('open');
            if (isOpen) {
                modal.classList.remove('open');
                document.body.style.overflow = 'auto';
                window.swiper?.destroy();
            } else {
                modal.classList.add('open');
                document.body.style.overflow = 'hidden';
                window.swiper = initSwiper(button.parentNode.querySelector('.modal .timeline-swiper'));
            }
        })
    })
</script>

<style lang="scss">
  @import "../styles/vars";

  .star {
    width: 20px;
  }

  .name {
    text-transform: uppercase;
  }

  .logo {
    max-height: 28px;
    max-width: min-content;
  }

  .months {
    color: $months;
  }

  .line {
    height: 1px;
    width: 100%;
    background-color: #000000;
    opacity: 0.06;
  }
</style>