---
import type {TimelineCard} from "../interfaces/timeline-card";
import {Image} from 'astro:assets';
import {useTranslations} from "../i18n/utils";
import Text from "../layouts/Text.astro";
import {StyleFSEnum} from "../styles/enums/fs.enum";
import Box from "../layouts/Box.astro";
import Cross from "../icons/cross.svg";
import ChevronRight from "../icons/chevron-right.svg";
import ChevronLeft from "../icons/chevron-left.svg";
import Fullscreen from "../icons/fullscreen.svg";
import CloseFullscreen from "../icons/close-fullscreen.svg";
import Calendar from "../icons/calendar.svg";
import Flex from "../layouts/Flex.astro";
import {StyleSPEnum} from "../styles/enums/sp.enum";
import {StyleAlignItemsEnum} from "../styles/enums/align-items.enum";
import {getDate} from "../helpers/getDate";
import Spacer from "../layouts/Spacer.astro";
import {StyleFlexWrapEnum} from "../styles/enums/flex-wrap.enum";
import Tag from "./Tag.astro";
import Star from "../icons/star.svg";
interface Props extends TimelineCard {
}

const {
    id,
    name,
    position,
    company,
    fullTags,
    logo,
    longLogo,
    images,
    fullDescription,
    video,
    tags,
    endDate,
    startDate,
    star
} = Astro.props;

const {t} = useTranslations(Astro.url);
---
<section id={id} class="modal">
    <Box class="modal-bg"/>
    <Box class="modal-container">
        <header>
            <Image class="company-image" src={company.logo}
                   alt={`${company.name} logo`} loading="eager"/>
            <Text fontSize={{default: StyleFSEnum.FS24, mobile: StyleFSEnum.FS16}}>
                {company.name}
            </Text>
            {star ?
                    <Image class="star" src={Star} alt="Star" loading="eager"/> : ''}
            <Image class="cross" src={Cross} alt="Cross icon" loading="eager"/>
        </header>
        <Box class="project">
            <Flex gap={StyleSPEnum.SP16} alignItems={StyleAlignItemsEnum.CENTER}>
                <Image class={`project-logo ${longLogo ? 'small' : ''}`} src={logo} alt="Project logo" loading="eager"/>
                <Text class="name" fontSize={StyleFSEnum.FS20}>
                    {position}
                </Text>
            </Flex>
            <Flex gap={StyleSPEnum.SP4} alignItems={StyleAlignItemsEnum.CENTER}>
                <Image class="calendar-icon" src={Calendar} alt="Calendar icon" loading="eager"/>
                <Text fontSize={StyleFSEnum.FS14}>
                    {getDate(t, startDate)} <span class="separator"><span>-</span></span> {getDate(t, endDate)}
                </Text>
            </Flex>
        </Box>

        <Box class="container">
            {images?.length ?
                    <div class="swiper timeline-swiper">
                        <div class="swiper-wrapper">
                            {video ?
                                    <div class="swiper-slide">
                                        <video controls src={video} muted/>
                                    </div> : ''}
                            {images?.map((src, i) =>
                                    <div class="swiper-slide">
                                        <Image src={src} loading="eager" alt={`Slide ${i + 1}`}/>
                                    </div>
                            )}
                        </div>
                        <div class="swiper-pagination"></div>
                        <div class="swiper-button-prev">
                            <Image src={ChevronLeft} loading="eager" alt="<"/>
                        </div>
                        <div class="swiper-button-next">
                            <Image src={ChevronRight} loading="eager" alt=">"/>
                        </div>

                        <Box class="fullscreen">
                            <Image class="open" src={Fullscreen} loading="eager" alt="Fullscreen"/>
                            <Image class="close" src={CloseFullscreen} loading="eager" alt="Close fullscreen"/>
                        </Box>
                    </div> : ''}

            <Box class="content">
                <Text fontSize={StyleFSEnum.FS18}>
                    {name}
                </Text>
                <Spacer size={StyleSPEnum.SP8}/>
                <Flex wrap={StyleFlexWrapEnum.WRAP} gap={StyleSPEnum.SP4}>
                    {fullTags?.map((tag) =>
                            <Tag name={tag}/>)}
                </Flex>
                <Spacer size={StyleSPEnum.SP8}/>
                {fullDescription ?
                        <Text fontSize={StyleFSEnum.FS14}>
                            <Fragment set:html={fullDescription}/>
                        </Text> : ''}

                <Spacer size={StyleSPEnum.SP128}/>
            </Box>
        </Box>
    </Box>
</section>

<script>


    // import Swiper and modules styles
    import 'swiper/css';
    import 'swiper/css/navigation';
    import 'swiper/css/pagination';
    import initSwiper from '../js/initSwiper';

    const swiperContainers = document.querySelectorAll('.timeline-swiper');
    swiperContainers.forEach((container) => {
        // let swiper = initSwiper(container);
        const fullscreen = container.querySelector('.fullscreen');
        const cont: HTMLElement = fullscreen.parentNode.parentNode as HTMLElement;
        fullscreen.addEventListener('click', () => {
            toggleSwiperFullScreen(fullscreen as HTMLElement, cont);
            setTimeout(() => {
                window.swiper.autoplay.resume();
            }, 100);
        })
    })


    function exec(modal: HTMLElement) {
        const isOpen = modal.classList.contains('open');
        if (isOpen) {
            modal.classList.remove('open');
            document.body.style.overflow = 'auto';
            window.swiper?.destroy();
            if (window.videoInterval) {
                clearInterval(window.videoInterval);
                window.videoInterval = null;
            }
        } else {
            modal.classList.add('open');
            document.body.style.overflow = 'hidden';
            window.swiper = initSwiper(modal.querySelector('.timeline-swiper'));
        }
    }

    function toggleSwiperFullScreen(el: HTMLElement, container: HTMLElement) {
        const swiper: HTMLElement = el.parentNode as HTMLElement;
        if (swiper.classList.contains('swiper-fullscreen')) {
            container.prepend(swiper);
        } else {
            document.body.appendChild(swiper);
        }
        swiper.classList.toggle('swiper-fullscreen');
    }

    const bgs = document.querySelectorAll('.modal-bg');
    const cross = document.querySelectorAll('.modal header .cross');
    cross.forEach((cros) => {
        cros.addEventListener('click', () => {
            exec(cros.parentNode.parentNode.parentNode as HTMLElement);
        })
    })
    bgs.forEach((bg) => {
        bg.addEventListener('click', () => {
            exec(bg.parentNode as HTMLElement);
        })
    })
</script>

<style lang="scss">
  @import "../styles/vars";

  .star {
    width: 30px;
  }

  .swiper-fullscreen {
    position: fixed;
    width: 100vw;
    height: 100vh;
    left: 0;
    top: 0;
    z-index: 20;

    .swiper-wrapper {
      padding-top: 4vh;
      height: 90vh;
    }

    .fullscreen {
      .open {
        display: none;
      }

      .close {
        display: block;
      }
    }
  }

  .swiper {
    padding-top: 16px;
    padding-bottom: 16px;
    background-color: $modalHeaderBg;
  }

  .swiper-wrapper {
    height: 30vh;
  }

  .swiper-slide {
    width: auto;
    max-width: 90vw;

    img, video {
      width: 100%;
      height: 100%;
      object-fit: contain;
      border-radius: 8px;
    }
  }

  .container {
    height: calc(100vh - 160px);
    overflow: auto;
  }

  .content {
    padding: $sp32;
  }

  .swiper-pagination {
    background-color: $white;
    border-radius: 16px;
    padding: 6px;
    border: 1px solid $swiper;
    width: 86px !important;

    :global(.swiper-pagination-bullet) {
      width: 10px;
      height: 10px;
      border: 1px solid $swiper;
      transform: scale(1);
      background-color: $white;
      opacity: 1;

      &.swiper-pagination-bullet-active-main {
        background-color: $swiper !important;
      }
    }
  }


  .swiper-button-prev, .swiper-button-next {
    width: 45px;
    height: 45px;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    background-color: $white;
    border: 1px solid $swiper;

    img {
      width: 28px;
    }

    &:after {
      display: none;
    }
  }

  :global(.swiper-pagination-bullet-active) {
    background-color: $dark !important;
  }

  .fullscreen {
    position: absolute;
    right: var(--swiper-navigation-sides-offset, 10px);
    top: 16px;
    z-index: 10;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    color: $dark;
    background-color: $white;
    border-radius: 50%;
    cursor: pointer;
    border: 1px solid $swiper;

    .close {
      display: none;
    }
  }

  .swiper {
    width: 100%;
  }

  .calendar-icon {
    width: 16px;
  }

  .project {
    height: 90px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-left: $sp32;
    padding-right: $sp32;
    gap: $sp16;

    .project-logo {
      height: 32px;
      max-width: min-content;
      width: 100%;
    }
  }

  header {
    background-color: $modalHeaderBg;
    position: relative;
    height: 70px;
    display: flex;
    align-items: center;
    padding-left: $sp32;
    gap: $sp8;

    .company-image {
      height: 45px;
      width: 45px;
      border-radius: 8px;
      border: 1px solid $logoBorder;
      overflow: hidden;
    }

    .cross {
      height: 18px;
      width: 18px;
      position: absolute;
      right: 25px;
      top: 50%;
      transition: 300ms ease;
      transform: translateY(-50%);
      cursor: pointer;

      &:hover {
        transform: translateY(-50%) scale(1.2);
      }
    }
  }

  .modal {
    position: fixed;
    z-index: 20;
    left: 0;
    top: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;

    .modal-bg {
      display: block;
      content: " ";
      width: 100vw;
      height: 100vh;
      background-color: rgba(0, 0, 0, 0.4);
      transition: 300ms ease;
      opacity: 0;
      pointer-events: none;
    }

    &.open {
      pointer-events: all;

      .modal-bg {
        opacity: 1;
        pointer-events: all;
      }

      .modal-container {
        transform: translateX(0);
      }
    }

  }

  .modal-container {
    position: fixed;
    z-index: 21;
    top: 0;
    right: 0;
    max-width: 800px;
    width: 100%;
    height: 100vh;
    background-color: $white;
    transition: 300ms ease;
    transform: translateX(100%);
  }

  @media all and (max-width: $mobileSmall) {
    .project {
      .project-logo {
        &.small {
          height: 24px;
        }
      }

      .name {
        display: none;
      }
    }
    .separator {
      display: block;
      height: $sp4;

      > span {
        display: none;
      }
    }
  }
</style>