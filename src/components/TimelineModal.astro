---
import type {TimelineCard} from "../interfaces/timeline-card";
import {Image} from 'astro:assets';
import {useTranslations} from "../i18n/utils";
import Text from "../layouts/Text.astro";
import {StyleFSEnum} from "../styles/enums/fs.enum";
import Flex from "../layouts/Flex.astro";
import {StyleSPEnum} from "../styles/enums/sp.enum";
import {StyleAlignItemsEnum} from "../styles/enums/align-items.enum";
import Spacer from "../layouts/Spacer.astro";
import Tag from "./Tag.astro";
import Box from "../layouts/Box.astro";
import Button from "../layouts/Button.astro";
import {ButtonTypeEnum} from "../styles/enums/button-type.enum";
import {StyleFlexWrapEnum} from "../styles/enums/flex-wrap.enum";
interface Props extends TimelineCard {
}

const {id, name, position, logo, description, tags, endDate, startDate, current} = Astro.props;

const {t} = useTranslations(Astro.url);
---
<article id={id} class="modal">
    <Box class="modal-bg"/>
    <Box class="modal-container">
        {name}
    </Box>
</article>

<script>
    const bgs = document.querySelectorAll('.modal-bg');
    bgs.forEach((bg) => {
        bg.addEventListener('click', () => {
            const modal = bg.parentNode as HTMLElement;
            const isOpen = modal.classList.contains('open');
            if (isOpen) {
                modal.classList.remove('open');
                document.body.style.overflow = 'auto';
            } else {
                modal.classList.add('open');
                document.body.style.overflow = 'hidden';
            }
        })
    })
</script>

<style lang="scss">
  @import "../styles/vars";

  .modal {
    position: fixed;
    z-index: 20;
    left: 0;
    top: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;

    .modal-bg {
      display: block;
      content: " ";
      width: 100vw;
      height: 100vh;
      background-color: rgba(0, 0, 0, 0.4);
      transition: 300ms ease;
      opacity: 0;
      pointer-events: none;
    }

    &.open {
      pointer-events: all;

      .modal-bg {
        opacity: 1;
        pointer-events: all;
      }

      .modal-container {
        transform: translateX(0);
      }
    }

  }

  .modal-container {
    position: fixed;
    z-index: 21;
    top: 0;
    right: 0;
    width: 800px;
    height: 100vh;
    background-color: $white;
    transition: 300ms ease;
    transform: translateX(100%);
  }
</style>